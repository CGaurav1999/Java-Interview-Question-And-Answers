==============================
        ✨ GIT INTERVIEW QUESTIONS ✨
==============================


1️⃣ **What is Git, and how does it work?**
**Answer:**
Git is a **distributed version control system (DVCS)** used for tracking changes in source code. It helps multiple developers collaborate efficiently. It maintains a history of changes and allows:
✅ **Branching**
✅ **Merging**
✅ **Rollback of Code**


2️⃣ **What is the difference between `git pull` and `git fetch`?**
**Answer:**
✔️ **`git fetch`** → Fetches changes from the remote but **does not merge** them.
✔️ **`git pull`** → Fetches changes from the remote **and merges them** into the local branch.


3️⃣ **How do you check the history of commits in Git?**
**Answer:**
Run the command:
```bash
git log
```


4️⃣ **What is the difference between `git merge` and `git rebase`?**
**Answer:**
📌 **Merge:**
```bash
git merge dev
```
🔹 Changes from `dev` will be merged into `main` with a **new auto commit**: `merge "dev"`

📌 **Rebase:**
```bash
git rebase dev
```
🔹 The same changes will be applied, **but no extra commits will be added**.


5️⃣ **How do you resolve merge conflicts in Git?**
**Answer:**
✅ Use Git's built-in compare tool to **highlight differences**.
✅ Manually **fix the conflicts**, add them to the **staging area**, and **commit**.


6️⃣ **How do you delete a branch in Git?**
**Answer:**
🔹 **Delete a local branch:**
```bash
git branch -d dev
```
🔹 **Delete a remote branch:**
```bash
git push origin --delete dev
```


7️⃣ **What is the purpose of `git stash`?**
**Answer:**
`git stash` temporarily **stores uncommitted changes**, allowing you to switch branches without committing.
🔹 To apply the stashed changes:
```bash
git stash pop
```


8️⃣ **What is the difference between `git reset` and `git revert`?**
**Answer:**
✔️ **`git reset --hard <commit>`** → Erases all commits after the specified commit and discards changes.
✔️ **`git reset --mixed <commit>`** → Removes commits but **keeps changes in working directory**.
✔️ **`git reset --soft <commit>`** → Removes commits but **keeps changes in the staging area**.
✔️ **`git revert <commit>`** → Creates a **new commit** that **undos changes** from a previous commit **without deleting history**.


9️⃣ **How do you revert a commit that has already been pushed?**
**Answer:**
1. **Pull the latest changes**:
```bash
git pull origin dev
```
2. **Revert the commit**:
```bash
git revert <commit-hash>
```
3. **Push the changes**:
```bash
git push origin dev
```


🔟 **How do you undo the last commit?**
**Answer:**
🔹 **To undo but keep changes:**
```bash
git reset --soft HEAD~1
```
🔹 **To undo and discard changes:**
```bash
git reset --hard HEAD~1
```
🔹 **If pushed, use `git revert` (recommended).**


1️⃣1️⃣ **How do you see which files have changed in the last commit?**
**Answer:**
Run:
```bash
git diff HEAD~1 HEAD
```


1️⃣2️⃣ **How do you check which branches contain a specific commit?**
**Answer:**
Run:
```bash
git branch --contains <commit-hash>
```


1️⃣3️⃣ **If you accidentally committed sensitive information, how do you remove it from Git history?**
**Answer:**
✅ Use `git filter-branch` or `git rebase` to remove it from commit history.
✅ Force push to remote (`git push --force`), but **use with caution!**

==============================
✨ **END OF DOCUMENT** ✨
==============================

